/**
 * üßö‚Äç‚ôÄÔ∏è How to access:
 *     - import { hashCreate } from '@ace/hashCreate'
 *     - import type { HashCreateProps } from '@ace/hashCreate'
 */


import { base64UrlEncode } from './base64UrlEncode'



/**
 * ### Hash a password in node or on the Edge (Cloudflare Workers)
 * - We recommend a secret that is at least 64 bytes so you get the full 512 bits of key entropy, to create a secret we recommend, bash: `openssl rand -base64 64`
 * - Adds iat (issued at) & exp (expired at) props to the payload to align w/ `JWT spec (RFC 7519)`
 * - Uses the `PBKDF2` algorithm and either the `SHA-256` or `SHA-512` (strongest / default) hash functions
 * @example
  ```ts
  const hash = await hashCreate({ password: 'example' })
  ```
 * @param props.password - The plaintext password to hash
 * @param props.saltLength - The National Institute of Standards and Technology (NIST) recommends a random salt length of 16 so we do to. `(default is 16)`
 * @param props.iterations - We recommend 300_000 to 1_000_000 iterations in Node for high security & fast performance `(default is 99_999)`. The default is 99_999 b/c that is the max allowed in the browser, aka @ Cloudflare Workers. More iterations = More security = Slower performance, Test & time, a good ballpark time is 100 to 300ms
 * @param props.hashFn - `SHA-512 (default)` w/ default saltLength & iterations is far beyond classical brute-force capabilities. SHA-256 is slightly weaker but faster.
 * @returns A hashed password using `SHA-256` or `SHA-512`
 */
export async function hashCreate({ password, saltLength = 16, iterations = 99_999, hashFn = 'SHA-512' }: HashCreateProps): Promise<string> {
  const encoder = new TextEncoder()

  const passwordBinary = encoder.encode(password)

  const salt = crypto.getRandomValues(new Uint8Array(saltLength)) // random salt

  const cryptoKey = await crypto.subtle.importKey( 'raw', passwordBinary, 'PBKDF2', false, ['deriveBits'])

  const hashBinary = await crypto.subtle.deriveBits( { name: 'PBKDF2', salt, iterations, hash: hashFn }, cryptoKey, hashFn === 'SHA-512' ? 512 : 256 )

  const saltB64 = base64UrlEncode(salt.buffer)

  const hashB64 = base64UrlEncode(hashBinary)

  return `PBKDF2$${hashFn}$${iterations}$${saltB64}$${hashB64}` // $ is the standard delimiter in password hashes generated by tools like crypt(3) in C, bcrypt and sha512crypt
}


export type HashCreateProps = {
  /** The plaintext password to hash */
  password: string
  /** The National Institute of Standards and Technology (NIST) recommends a random salt length of 16 so we do to. `(default is 16)` */
  saltLength?: number
  /** We recommend 300_000 to 1_000_000 iterations in Node for high security & fast performance `(default is 99_999)`. The default is 99_999 b/c that is the max allowed in the browser, aka @ Cloudflare Workers. More iterations = More security = Slower performance, Test & time, a good ballpark time is 100 to 300ms */
  iterations?: number
  /** `SHA-512 (default)` w/ default saltLength & iterations is far beyond classical brute-force capabilities. SHA-256 is slightly weaker but faster. */
  hashFn?: 'SHA-512' | 'SHA-256'
}
